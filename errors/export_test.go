// gogo.  A Go (Golang) toolbox.
// Copyright (C) 2019-2023  Yuan Gao
//
// This file is part of gogo.
//
// gogo is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package errors

import "github.com/donyori/gogo/runtime"

// Export for testing only.

// NewAutoWrappedError wraps err and returns the result
// of type AutoWrappedError.
//
// It is used to simulate the error generated by AutoWrap, AutoWrapSkip,
// AutoWrapCustom, AutoNew, or AutoNewCustom for testing.
//
// If err is nil, NewAutoWrappedError returns nil.
//
// suffix is to be appended to the function name, with a leading underscore,
// to simulate auto-wrapped by different functions.
// If suffix is empty, the function name remains unchanged.
func NewAutoWrappedError(err error, suffix string) AutoWrappedError {
	if err == nil {
		return nil
	}
	frame, ok := runtime.CallerFrame(1)
	if !ok || frame.Function == "" ||
		len(runtime.FuncPkg(frame.Function)) >= len(frame.Function) {
		panic(AutoMsg("cannot retrieve caller function name"))
	}
	awe := &autoWrappedError{
		err:      err,
		ms:       PrependSimpleFuncName,
		fullFunc: frame.Function,
	}
	if suffix != "" {
		awe.fullFunc += "_" + suffix
	}
	return awe
}

type ErrorListImpl = errorList

func (el *ErrorListImpl) GetList() []error {
	if el == nil {
		return nil
	}
	return el.list
}
